{"ast":null,"code":"import { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nlet apolloClient;\n\nfunction createIsomorphLink(context = {}) {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('@apollo/client/link/schema');\n\n    const {\n      schema\n    } = require('./schema');\n\n    return new SchemaLink({\n      schema,\n      context\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('@apollo/client');\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}\n\nfunction createApolloClient(context) {\n  return new ApolloClient({\n    ssrMode: true,\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache()\n  });\n}\n\nexport function initializeApollo(initialState = null, // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n// a custom context which will be used by `SchemaLink` to server render pages\ncontext) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(context); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n\n\n  if (initialState) {\n    _apolloClient.cache.restore(initialState);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/waleed/iwork/jobs/upwork/Matthew/gethired-company/src/lib/apollo.ts"],"names":["useMemo","ApolloClient","InMemoryCache","apolloClient","createIsomorphLink","context","SchemaLink","require","schema","HttpLink","uri","credentials","createApolloClient","ssrMode","link","cache","initializeApollo","initialState","_apolloClient","restore","useApollo","store"],"mappings":"AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SACEC,YADF,EAEEC,aAFF,QAIO,gBAJP;AAMA,IAAIC,YAAJ;;AAOA,SAASC,kBAAT,CAA4BC,OAAwB,GAAG,EAAvD,EAA2D;AACzD,YAAmC;AACjC,UAAM;AAAEC,MAAAA;AAAF,QAAiBC,OAAO,CAAC,4BAAD,CAA9B;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaD,OAAO,CAAC,UAAD,CAA1B;;AACA,WAAO,IAAID,UAAJ,CAAe;AAAEE,MAAAA,MAAF;AAAUH,MAAAA;AAAV,KAAf,CAAP;AACD,GAJD,MAIO;AACL,UAAM;AAAEI,MAAAA;AAAF,QAAeF,OAAO,CAAC,gBAAD,CAA5B;;AACA,WAAO,IAAIE,QAAJ,CAAa;AAClBC,MAAAA,GAAG,EAAE,cADa;AAElBC,MAAAA,WAAW,EAAE;AAFK,KAAb,CAAP;AAID;AACF;;AAED,SAASC,kBAAT,CAA4BP,OAA5B,EAAuD;AACrD,SAAO,IAAIJ,YAAJ,CAAiB;AACtBY,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAEV,kBAAkB,CAACC,OAAD,CAFF;AAGtBU,IAAAA,KAAK,EAAE,IAAIb,aAAJ;AAHe,GAAjB,CAAP;AAKD;;AAED,OAAO,SAASc,gBAAT,CACLC,YAAiB,GAAG,IADf,EAEL;AACA;AACAZ,OAJK,EAKL;AAAA;;AACA,QAAMa,aAAa,qBAAGf,YAAH,2DAAmBS,kBAAkB,CAACP,OAAD,CAAxD,CADA,CAGA;AACA;;;AACA,MAAIY,YAAJ,EAAkB;AAChBC,IAAAA,aAAa,CAACH,KAAd,CAAoBI,OAApB,CAA4BF,YAA5B;AACD,GAPD,CAQA;;;AACA,YAAmC,OAAOC,aAAP,CATnC,CAUA;;AACA,MAAI,CAACf,YAAL,EAAmBA,YAAY,GAAGe,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBH,YAAnB,EAAsC;AAC3C,QAAMI,KAAK,GAAGrB,OAAO,CAAC,MAAMgB,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOI,KAAP;AACD","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport { useMemo } from 'react'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from '@apollo/client'\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined\n\nexport type ResolverContext = {\n  req?: IncomingMessage\n  res?: ServerResponse\n}\n\nfunction createIsomorphLink(context: ResolverContext = {}) {\n  if (typeof window === 'undefined') {\n    const { SchemaLink } = require('@apollo/client/link/schema')\n    const { schema } = require('./schema')\n    return new SchemaLink({ schema, context })\n  } else {\n    const { HttpLink } = require('@apollo/client')\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    })\n  }\n}\n\nfunction createApolloClient(context?: ResolverContext) {\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined',\n    link: createIsomorphLink(context),\n    cache: new InMemoryCache(),\n  })\n}\n\nexport function initializeApollo(\n  initialState: any = null,\n  // Pages with Next.js data fetching methods, like `getStaticProps`, can send\n  // a custom context which will be used by `SchemaLink` to server render pages\n  context?: ResolverContext\n) {\n  const _apolloClient = apolloClient ?? createApolloClient(context)\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // get hydrated here\n  if (initialState) {\n    _apolloClient.cache.restore(initialState)\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function useApollo(initialState: any) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}